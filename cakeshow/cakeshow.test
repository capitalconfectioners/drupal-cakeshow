<?php

class TestSubscriptionCheckouts extends CommerceBaseTestCase {
    public static function getInfo() {
        return array(
            'name' => 'Subscription Checkouts UI Tests',
            'description' => 'Check for creating custom subscriptions on checkout',
            'group' => 'Cakeshow',
        );
    }

    public function setUp() {
        error_log('cakeshow.test: in setup');

        $modules = parent::setUpHelper('all');
        $modules[] = 'libraries';
        $modules[] = 'commerce_stripe';
        $modules[] = 'cakeshow';
        $modules[] = 'mock_stripe';
        parent::setUp($modules);

        global $base_url;
        require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

        Stripe::$apiBase = $base_url . '/mock_stripe';

        variable_set('stripe_base_url', Stripe::$apiBase);
        variable_set('stripe_api_key', 'fakekey');

        $this->store_admin = $this->createStoreAdmin();
        $this->customer = $this->createStoreCustomer();

        $this->product1 = $this->createDummyProduct('Product1', 'Product 1', 2000, 'USD');

        // The rule that sends a mail after checkout completion should
        //  be disabled as it returns an error caused by how mail
        //  messages are stored.
        $rules_config = rules_config_load('commerce_checkout_order_email');
        $rules_config->active = FALSE;
        $rules_config->save();

        $cakeshow_rule = rules_config_load('commerce_payment_cakeshow');
        $cakeshow_rule->active = TRUE;
        $cakeshow_rule->save();

        $this->configureCommerceStripe();
    }

    protected function configureCommerceStripe() {
        // Seems silly to do this via the edit form, but I can't find
        // any documentaiton on where the settings are saved, and all
        // the example tests configure everything this way.
        $this->drupalLogin($this->store_admin);

        // Not sure where "3" comes from; it might be specific to my
        // installation, but I can't really find any documentation on
        // this
        $this->drupalGet('admin/commerce/config/payment-methods/manage/commerce_payment_commerce_stripe/edit/3');

        $info = array(
            'parameter[payment_method][settings][payment_method][settings][stripe_currency]' => 'USD',
            'parameter[payment_method][settings][payment_method][settings][secret_key]' => 'private',
            'parameter[payment_method][settings][payment_method][settings][public_key]' => 'public'
        );

        $this->drupalPost(NULL, $info, t('Save'));
    }

    protected function createOrderAndGoToPayment($products) {
        $this->drupalLogin($this->customer);

        $this->order = $this->createDummyOrder(
            $this->customer->uid,
            $products);

        $this->drupalGet($this->getCommerceUrl('checkout'));

        $address_info = $this->generateAddressInformation();

        $billing_pane = $this->xpath(
            "//select[starts-with(@name, " .
            "'customer_profile_billing[commerce_customer_address]')]");

        $this->drupalPostAJAX(
            NULL,
            array((string) $billing_pane[0]['name'] => 'US'),
            (string) $billing_pane[0]['name']);

        $info = array(
            'customer_profile_billing[commerce_customer_address][und][0][name_line]' => $address_info['name_line'],
            'customer_profile_billing[commerce_customer_address][und][0][thoroughfare]' => $address_info['thoroughfare'],
            'customer_profile_billing[commerce_customer_address][und][0][locality]' => $address_info['locality'],
            'customer_profile_billing[commerce_customer_address][und][0][administrative_area]' => $address_info['administrative_area'],
            'customer_profile_billing[commerce_customer_address][und][0][postal_code]' => $address_info['postal_code'],
        );
        $this->drupalPost(NULL, $info, t('Continue to next step'));
    }

    private function _getMockData($url) {
        global $base_url;

        $fullUrl = $base_url . $url;

        $ch = curl_init($fullUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

        $result = curl_exec($ch);
        curl_close($ch);

        return $result;
    }

    public function testShowsSubmissionForm() {
        $this->createOrderAndGoToPayment(array($this->product1->product_id => 1));

        $this->assertFieldByName('commerce_payment[payment_details][credit_card][number]');
    }

    public function testSubmitsPartialPaymentAndCreatesSubscription() {
        $this->createOrderAndGoToPayment(array($this->product1->product_id => 1));

        $info = array(
            'commerce_payment[payment_details][credit_card][owner]' => 'A Customer',
            'commerce_payment[payment_details][credit_card][number]' => '4242424242424242',
            'commerce_payment[payment_details][credit_card][exp_month]' => '05',
            'commerce_payment[payment_details][credit_card][exp_year]' => '2013',
            'commerce_payment[payment_details][credit_card][code]' => '111',
        );

        $this->drupalPost(NULL, $info, t('Continue to next step'), array(), array(), NULL, '&stripeToken=asdf');

        $charges = json_decode($this->_getMockData('/mock_stripe/mock/charges_made'));
        debug($charges, 'charges made');
        
        //$this->assertEqual(MockStripe::$charges[0]['amount'], 2000);
    }
}