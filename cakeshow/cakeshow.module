<?php

function cakeshow_help($path, $arg) {
    switch ($path) {
        case "admin/help#cakeshow":
            return '<p>' .
                t("Manages all the custom features for the cakeshow") . '</p>';
            break;
    }
}

function cakeshow_commerce_payment_method_info() {
    $payment_methods = array();

    $payment_methods['cakeshow'] = array(
        'title' => 'Cakeshow Subscription Billing',
        'description' => t('Subscription Billing for Cakeshow Attendees'),
        'active' => FALSE,
        'terminal' => FALSE,
        'offsite' => FALSE,
        'callbacks' => array()
    );

    return $payment_methods;
}

function cakeshow_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    _load_stripe_path();
    module_load_include('module', 'commerce_stripe');
    $commerce_stripe_module = commerce_payment_method_instance_load('commerce_stripe|commerce_payment_commerce_stripe');
    
    return commerce_stripe_submit_form($commerce_stripe_module, $pane_values, $checkout_pane, $order);
}

function cakeshow_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
    _load_stripe_path();

    $now = _get_time();

    debug($now, 'possibly mocked time');
    
    module_load_include('module', 'commerce_stripe');
    $commerce_stripe_module = commerce_payment_method_instance_load('commerce_stripe|commerce_payment_commerce_stripe');

    return commerce_stripe_submit_form_submit($commerce_stripe_module, $pane_form, $pane_values, $order, $charge);
}

function _load_stripe_path() {
    module_load_include('module', 'commerce_stripe');
    global $commerce_stripe_module;
    require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

    // This is just for Unit Testing purposes; outside of the Unit
    // Test environment, the variable should not be set, so the built
    // in value should be used.
    $stripe_base_url = variable_get('stripe_base_url', Stripe::$apiBase);

    Stripe::$apiBase = $stripe_base_url;
}

function _get_time() {
    $time_value = variable_get('mock_time', 'now');

    return new DateTime($time_value);
}
